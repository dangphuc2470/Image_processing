
import 'package:flutter/material.dart';

@immutable
class ExpandableFab extends StatefulWidget {
  const ExpandableFab({
    super.key,
    this.initialOpen,
    required this.distance,
    required this.children,
  });

  final bool? initialOpen;
  final double distance;
  final List<Widget> children;

  @override
  State<ExpandableFab> createState() => _ExpandableFabState();
}

class _ExpandableFabState extends State<ExpandableFab>
    with SingleTickerProviderStateMixin {
  late final AnimationController _controller;
  late final Animation<double> _expandAnimation;
  bool _open = false;

  @override
  void initState() {
    super.initState();
    _open = widget.initialOpen ?? false;
    _controller = AnimationController(
      value: _open ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 250),
      vsync: this,
    );
    _expandAnimation = CurvedAnimation(
      curve: Curves.fastOutSlowIn,
      reverseCurve: Curves.easeOutQuad,
      parent: _controller,
    );
  }

  void _toggle() {
    setState(() {
      _open = !_open;
      if (_open) {
        _controller.forward();
      } else {
        _controller.reverse();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox.expand(
      child: Stack(
        alignment: Alignment.bottomRight,
        clipBehavior: Clip.none,
        children: [
          _buildTapToCloseFab(),
          ..._buildExpandingActionButtons(),
          _buildTapToOpenFab(),
        ],
      ),
    );
  }


 Widget _buildTapToCloseFab() {
  return IgnorePointer(
    ignoring: !_open,
    child: AnimatedRotation(
      turns: _open ? 0.250 : 0.0,
      curve: const Interval(0.25, 1.0, curve: Curves.easeInOut),
      duration: const Duration(milliseconds: 250),
      child: AnimatedOpacity(
        opacity: _open ? 1.0 : 0.0,
        curve: const Interval(0.05, 1.0, curve: Curves.easeInOut),
        duration: const Duration(milliseconds: 50),
        child: FloatingActionButton(
          heroTag: 'close',
          onPressed: _toggle,
          child: const Icon(Icons.close, color: Colors.black, size: 30),
        ),
      ),
    ),
  );
}

Widget _buildTapToOpenFab() {
  return IgnorePointer(
    ignoring: _open,
    child: AnimatedRotation(
      turns: _open ? 0.0 : 0.250,
      curve: const Interval(0.25, 1.0, curve: Curves.easeInOut),
      duration: const Duration(milliseconds: 250),
      child: AnimatedOpacity(
        opacity: _open ? 0.0 : 1.0,
        curve: const Interval(0.05, 1.0, curve: Curves.easeInOut),
        duration: const Duration(milliseconds: 50),
        child: FloatingActionButton(
          heroTag: 'open',
          onPressed: _toggle,
          child: const Icon(Icons.add_rounded, color: Colors.white, size: 30),
        ),
      ),
    ),
  );
}

  List<Widget> _buildExpandingActionButtons() {
    final children = <Widget>[];
    final count = widget.children.length;
    const step = 50.0;
    for (var i = 0, distance = 70.0; i < count; i++, distance += step) {
      children.add(
        _ExpandingActionButton(
          distance: distance,
          progress: _expandAnimation,
          child: widget.children[i],
        ),
      );
    }
    return children;
  }
}

@immutable
class ActionButton extends StatelessWidget {
  const ActionButton({
    super.key,
    this.onPressed,
    required this.icon,
  });

  final VoidCallback? onPressed;
  final Widget icon;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Material(
      shape: const CircleBorder(),
      clipBehavior: Clip.antiAlias,
      color: theme.colorScheme.secondary,
      elevation: 4,
      child: IconButton(
        onPressed: onPressed,
        icon: icon,
        color: theme.colorScheme.onSecondary,
      ),
    );
  }
}

@immutable
class _ExpandingActionButton extends StatelessWidget {
  const _ExpandingActionButton({
    required this.distance,
    required this.progress,
    required this.child,
  });

  final double distance;
  final Animation<double> progress;
  final Widget child;

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: progress,
      builder: (context, child) {
        return Positioned(
          right: 4.0,
          bottom: 4.0 + distance,
          child: Transform.translate(offset: Offset(0.0, -distance * progress.value * 0.1), child: child),
        );
      },
      child: FadeTransition(
        opacity: progress,
        child: child,
      ),
    );
  }
}
